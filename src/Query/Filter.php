<?php

namespace WebImage\Node\Query;

class Filter extends Property
{
	const OPERATOR_EQUALS = '=';
	const OPERATOR_GT = '>';
	const OPERATOR_GTE = '>=';
	const OPERATOR_LT = '<';
	const OPERATOR_LTE = '<=';
	const OPERATOR_LIKE = '%';
	const OPERATOR_NOT_LIKE = '!%';
	const OPERATOR_NOT_EQUALS = '!=';
	/**
	 * @var string
	 */
	private $value;
	/**
	 * @var string
	 */
	private $operator;

	/**
	 * Filter constructor.
	 *
	 * @param string $property
	 * @param mixed $value
	 * @param string $operator
	 */
	public function __construct($property, $value, $operator = self::OPERATOR_EQUALS)
	{
		parent::__construct($property);

		$this->value = $value;
		$this->operator = $this->validOperator($operator);
	}

	public function getValue()
	{
		return $this->value;
	}

	public function getOperator()
	{
		return $this->operator;
	}

//	public static function create($sProperty, $value, $operator = '=')
//	{
//		$instance = parent::createFromString($sProperty); // TODO: Change the autogenerated stub
//		$instance->value = $value;
//
//		return $instance;
//	}

	private function validOperator($operator)
	{
		if (!in_array($operator, $this->getSupportedOperators())) {
			throw new \InvalidArgumentException('Operator must be one of ' . implode(', ', $this->getSupportedOperators()));
		}

		return $operator;
	}

	private function getSupportedOperators()
	{
		return [self::OPERATOR_EQUALS, self::OPERATOR_GT, self::OPERATOR_GTE, self::OPERATOR_LIKE, self::OPERATOR_LT, self::OPERATOR_LTE, self::OPERATOR_NOT_EQUALS];
	}
}